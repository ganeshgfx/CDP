1
#include<stdio.h>
#include<conio.h>
#include<string.h>
void main()
{
	char d[15]={'[',']','(',')','{','}',';',':','&','?',',','.'};
	char n[30]={'\0'},s[30]={'\0'},nd[30]={'\0'},no[30]={'\0'},ndo[30]={'\0'};
	char o[20]={'+','-','*','/','=','!'};
	int l,len,len1,k=0,i,j,a=0,f,g;
len=strlen(d);
	printf("\n \n \n len of delimeters %d\n\n",len);
len1=strlen(o);
	printf("len of operators %d\n",len1);
printf("\nenter the string \n");
	gets(s);
l=strlen(s);
	printf("\nlen of string \n%d\n",l);
for(i=0;i<l;i++)// delimeters& operators
	{
		for(j=0;j<len;j++)              //delimeter//
		{
			if(s[i]==d[j])
			{
				n[k]=s[i];
				k++;
				break;
			}
		}
		for(g=0;g<len1;g++)             //operator//
		{
			if(s[i]==o[g])
			{
				no[a]=s[i];
				a++;
				break;
			}
		}
}
	printf("\ndelimeter are in string \n");
	for(i=0;i<k;i++)
	{
		printf("%c",n[i]);
	}
printf("\noperators are in string \n");
	for(i=0;i<a;i++)
	{
		printf("%c",no[i]);
	}
g=1;//removing repetation of token//
	nd[0]=n[0];
for(i=1;i<k;i++)
	{
		f=1;
		for(j=0;j<g;j++)
		{
			if(nd[j]==n[i])
			{
				f=0;
			}
		}
		if(f==1)
		{
			nd[g]=n[i];
			g++;
	}
	}
	printf("\n delimeter\n");
	for(i=0;i<g;i++)
	{
		printf("%c",nd[i]);
	}
    g=1;    //removing rep of operator
	ndo[0]=no[0];
for(i=1;i<a;i++)
	{
		f=1;
		for(j=0;j<g;j++)
		{
			if(ndo[j]==no[i])
			{
				f=0;
			}
		}
		if(f==1)
		{
	ndo[g]=no[i];
			g++;
}
	}
	printf("\n operators\n");
	for(i=0;i<g;i++)
	{
		printf("%c",ndo[i]);
	}
	getch();
}

3
%option noyywrap
%{
	#include<stdio.h>
	int chars=0,lines=1,space=0;
%}
CHAR [a-zA-Z]
LINE [\n]
WHSPACE [' ']
%%
{CHAR} {chars++;}
{LINE} {lines++;}
{WHSPACE} {space++;}
%%
int main()
{
	yyin=fopen("data.txt","r");
	yylex();
printf("\n\n no of characters in a file: %d\n\n ",chars);
	printf("\n\n no of lines in a file: %d\n\n ",lines);
	printf("\n\n no of whitespaces are in a file: %d\n\n ",space);
	return 0; }

4
%option noyywrap
%{
	#include<stdio.h>
	int d=0;
	int o=0;
%}

%%
[',"(){};:.] {d++;}
[*-/+^?<>=] {o++;}
%%
int main()
{
yyin=fopen("data.txt","r");
yylex();
printf("\n\n no of delimeters=%d \n\n",d);
printf("\n \n no of operators=%d \n\n",o);
	return 0;
}

5
%option noyywrap
%{
	#include<stdio.h>
	int vowel=0;
	int constant=0;
%}
%%
[aeiouAEIOU] {vowel++;}
[a-zA-Z] {constant++;}
%%
int main()
{
yyin=fopen("data.txt","r");
yylex();
printf("no of vowels=%d \n\n",vowel);
printf("no of constant=%d \n\n",constant);
	return 0;
}

6
%option noyywrap
%{
	#include<stdio.h>
	int posi=0,neg=0,pfrac=0,negfr=0;
%}
%%
[-][0-9]+ {neg++;}
[+]?[0-9]+ {posi++;}
[+]?[0-9]*\.[0-9]+ {pfrac++;}
[-][0-9]*\.[0-9]+ {negfr++;}
%%
int main()
{
yyin=fopen("data.txt","r");
yylex();
printf("no of Negative=%d \n\n",neg);
printf("no of Positive=%d \n\n",posi);
	printf("no of Positive fraction=%d \n\n",pfrac);
	printf("no of Negative fraction =%d \n\n",negfr);
	return 0;
}


7
%option noyywrap
%{#include<stdio.h>
int comm_count=0;
%}
Comm_int [^/''''/]*
COMMENT "/"{Comm_int}"/"
Normal [^/''''/'$'(END)]*
END (END)
%%
{COMMENT} {comm_count++;}
{Normal} {fprintf(yyout,"%s",yytext);}
{END} {fprintf(yyout,"NO OF COMMENTS:%d",comm_count);}
%%
int main()
{yyin=fopen("data.txt","r");
yyout=fopen("op.txt","w");
yylex();
return 0;
}


8
%option noyywrap
%{
	#include<stdio.h>
	int pc=0,sc=0;
%}
%%
"printf" { fprintf(yyout,"writef"); pc++;}
"scanf" { fprintf(yyout,"readf"); sc++;}
%%
int main()
{
yyin=fopen("print.txt","r");
yyout=fopen("read.txt","w");
yylex();
printf("No of printf statements = %d \n\n No of scanf statements=%d", pc, sc);
return 0;
}

9
%option noyywrap
%{
   #include<stdio.h>
%}
FOR (for)
AND (and)
NOR (nor)
BUT (but)
OR  (or)
YET (yet)
SO  (so)
COORD {FOR}|{AND}|{NOR}|{BUT}|{OR}|{YET}|{SO}
SIMPLE [^"."",""\n"]*
COMPOUND {SIMPLE}","" "{COORD}{SIMPLE}
%%
{SIMPLE} {printf("Simple statement");
}
{COMPOUND} {printf("Compound Statement");
}
%%
int main()
{ 
yyin=fopen("vdp.txt","r");
yylex();
return 0;
}
